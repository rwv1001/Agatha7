
<% if existing_group.nil? %>
  <% eval("#{table_name}.set_controller(search_ctl)") %>
  <% updated_objects = search_ctl.GetUpdateObjects(table_name, ["id"], ids) %>
  <% updated_objects.each do |row| %>
    (function(){
      const el = document.getElementById("<%= "#{row.id}_#{table_name}" %>");
      if (el) {
        // replaceWith: swap the element's outerHTML
        el.outerHTML = "<%= j render(partial: 'shared/search_results_row_button', object: row) %>";
      }
    })();
  <% end %>

  recolour("<%= table_name %>");

  // Update member count cells for affected persons and the new group
  setTimeout(function() {
    console.log("ðŸŽ¯ Updating group member count cells after group creation");

    <% if ids && ids.any? %>
      // Update Groups_in_<%= table_name %> cells for each added member
      <% ids.each do |person_id| %>
        console.log("Looking for <%= table_name.downcase %> row: <%= person_id %>_<%= table_name %>");
        const <%= table_name.downcase %>RowElement_<%= person_id %> = document.getElementById('<%= person_id %>_<%= table_name %>');
        if (<%= table_name.downcase %>RowElement_<%= person_id %>) {
          const groupsCell_<%= person_id %> = <%= table_name.downcase %>RowElement_<%= person_id %>.querySelector('.Groups_in_<%= table_name %>');
          if (groupsCell_<%= person_id %>) {
            groupsCell_<%= person_id %>.classList.add('cell-updated');
            setTimeout(() => {
              groupsCell_<%= person_id %>.classList.remove('cell-updated');
            }, 1500);
            console.log("âœ¨ Highlighted <%= table_name.downcase %> <%= person_id %>'s groups cell");
          }
        }
      <% end %>
    <% end %>

    // Update Number_of_group_members_Group cell for the new group
    console.log("Looking for new group row: <%= new_group_id %>_Group");
    const newGroupRowElement = document.getElementById('<%= new_group_id %>_Group');
    if (newGroupRowElement) {
      const membersCell = newGroupRowElement.querySelector('.Number_of_group_members_Group');
      if (membersCell) {
        membersCell.classList.add('cell-updated');
        setTimeout(() => {
          membersCell.classList.remove('cell-updated');
        }, 1500);
        console.log("âœ¨ Highlighted new group's member count cell");
      }
    }
  }, 100);

  <% table_name = "Group" %>
  <% eval("#{table_name}.set_controller(search_ctl_group)") %>
  <% updated_objects = search_ctl_group.GetUpdateObjects(table_name, ["id"], [new_group_id]) %>
  <% updated_objects.each do |row| %>
    (function(){
      const el = document.getElementById("<%= "#{row.id}_#{table_name}" %>");
      if (el) {
        el.outerHTML = "<%= j render(partial: 'shared/search_results_row_button', object: row) %>";
      }
    })();
  <% end %>

  <% results_table_name    = "search_results_table_Group" %>
  <% current_filter_name   = "current_filters_Group" %>
  document.getElementById("<%= current_filter_name %>").style.display = "none";

  <% eval("#{table_name}.set_controller(search_ctl_group)") %>
  <% select_string = search_ctl.get_sql_id_string([new_group_id]) %>
  <% new_rows = Group.find_by_sql(select_string) %>
  <% new_rows.each do |new_row| %>
    (function(){
      const resultsTable = document.getElementById("<%= results_table_name %>");
      const rowHtml      = "<%= j render(partial: 'shared/search_results_row_button', object: new_row) %>";
      if (resultsTable) {
        // insertAfter last row
        const lastTr = resultsTable.querySelector("tr:last-child");
        if (lastTr) lastTr.insertAdjacentHTML("afterend", rowHtml);
      } else {
        // replace entire results container
        document.getElementById("search_results_<%= table_name %>").innerHTML =
          "<%= j render(partial: 'shared/search_results', object: SearchResults.new([new_row], :search_results, search_ctl_group)) %>";
        resizeX();
      }

      const newOptionStr = "<%= search_ctl_group.GetShortField(new_row.id) %>";
      select_update("Group", <%= new_row.id %>, newOptionStr);
    })();
  <% end %>

  recolour("Group");
  action_select_no_js();

  // Refresh external filters for all tables to ensure new group appears in selects
  if (typeof refreshExternalFilterSelects === 'function') {
    //refreshExternalFilterSelects("Person");
   // refreshExternalFilterSelects("Group");
  }

  // Update external filter selects for Person tables that reference Group
  <% if table_name == "Person" %>
    // Update Group-related external filters
    const groupSelects = document.querySelectorAll('.Group_select');
    groupSelects.forEach(select => {
      // Find and add the new group option if not already present
      let optionExists = false;
      for (let option of select.options) {
        if (option.value == '<%= new_group_id %>') {
          optionExists = true;
          break;
        }
      }
      if (!optionExists) {
        const newOption = document.createElement('option');
        newOption.value = '<%= new_group_id %>';
        newOption.text = '<%= group_name %>';
        select.appendChild(newOption);
      }
    });

    // Update GroupPerson-related external filters
    const groupPersonSelects = document.querySelectorAll('.GroupPerson_select');
    groupPersonSelects.forEach(select => {
      // Force refresh of GroupPerson selects since new group members were added
      if (select.onchange) {
        select.onchange();
      }
    });
  <% end %>

  alert("Successfully created <%= class_name %> group with name <%= group_name %>");
<% else %>
  alert("Group creation failed: <%= class_name %> group with name <%= group_name %> already exists.");
<% end %>

unwait();
