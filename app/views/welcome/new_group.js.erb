
<% if existing_group.nil? %>
  <% eval("#{table_name}.set_controller(search_ctl)") %>
  <% updated_objects = search_ctl.GetUpdateObjects(table_name, ["id"], ids) %>
  <% updated_objects.each_with_index do |row, row_index| %>
    (function(){
      const el_<%= row.id %>_<%= row_index %> = document.getElementById("<%= "#{row.id}_#{table_name}" %>");
      if (el_<%= row.id %>_<%= row_index %>) {
        // replaceWith: swap the element's outerHTML
        el_<%= row.id %>_<%= row_index %>.outerHTML = "<%= j render(partial: 'shared/search_results_row_button', object: row) %>";
      }
    })();
  <% end %>

  recolour("<%= table_name %>");

  // Update member count cells for affected persons and the new group
  setTimeout(function() {
    console.log("üéØ Updating group member count cells after group creation");

    <% if ids && ids.any? %>
      // Update Groups_in_<%= table_name %> cells for each added member
      <% ids.each_with_index do |person_id, index| %>
        console.log("Looking for <%= table_name.downcase %> row: <%= person_id %>_<%= table_name %>");
        const personRowElement<%= index %> = document.getElementById('<%= person_id %>_<%= table_name %>');
        if (personRowElement<%= index %>) {
          const groupsCell<%= index %> = personRowElement<%= index %>.querySelector('.Groups_in_<%= table_name %>');
          if (groupsCell<%= index %>) {
            groupsCell<%= index %>.classList.add('cell-updated');
            setTimeout(() => {
              groupsCell<%= index %>.classList.remove('cell-updated');
            }, 1500);
            console.log("‚ú® Highlighted <%= table_name.downcase %> <%= person_id %>'s groups cell");
          }
        }
      <% end %>
    <% end %>

    // Update Number_of_group_members_Group cell for the new group
    console.log("Looking for new group row: <%= new_group_id %>_Group");
    const newGroupRowElement_<%= new_group_id %> = document.getElementById('<%= new_group_id %>_Group');
    if (newGroupRowElement_<%= new_group_id %>) {
      const membersCell_<%= new_group_id %> = newGroupRowElement_<%= new_group_id %>.querySelector('.Number_of_group_members_Group');
      if (membersCell_<%= new_group_id %>) {
        membersCell_<%= new_group_id %>.classList.add('cell-updated');
        setTimeout(() => {
          membersCell_<%= new_group_id %>.classList.remove('cell-updated');
        }, 1500);
        console.log("‚ú® Highlighted new group's member count cell");
      }
    }
  }, 100);

  // Force a complete refresh of the Group table to ensure proper display
  setTimeout(function() {
    console.log("üîÑ Forcing complete Group table refresh to display new group properly");
    
    // Find and trigger the Group search to refresh the entire table
    let groupRefreshTriggered_<%= new_group_id %> = false;
    
    const groupSearchButtons_<%= new_group_id %> = [
      document.querySelector('input[onclick="Search(\'Group\');return false"]'),
      document.querySelector('input[onclick*="Search(\'Group\')"]'),
      document.querySelector('#search_button_Group'),
      document.querySelector('input[value="Search"][onclick*="Group"]:not([onclick*="GroupPerson"]):not([onclick*="GroupCourse"]):not([onclick*="GroupLecture"])')
    ];
    
    for (let button of groupSearchButtons_<%= new_group_id %>) {
      if (button && !groupRefreshTriggered_<%= new_group_id %>) {
        const onclick_<%= new_group_id %> = button.getAttribute('onclick') || '';
        // Make sure we're clicking the Group search, not GroupPerson, GroupCourse, etc.
        if (onclick_<%= new_group_id %>.includes("Search('Group')") && !onclick_<%= new_group_id %>.includes("Group<%= table_name %>")) {
          console.log("Found Group search button, clicking to refresh:", button);
          button.click();
          groupRefreshTriggered_<%= new_group_id %> = true;
          break;
        }
      }
    }
    
    // Try calling Search function directly for Group if button not found
    if (!groupRefreshTriggered_<%= new_group_id %> && typeof Search === 'function') {
      console.log("Calling Search('Group') directly to refresh table");
      Search('Group');
      groupRefreshTriggered_<%= new_group_id %> = true;
    }
    
    if (groupRefreshTriggered_<%= new_group_id %>) {
      console.log("‚úÖ Group table refresh triggered successfully");
      
      // After refresh, highlight the new group row
      setTimeout(() => {
        const newGroupRow_<%= new_group_id %> = document.getElementById('<%= new_group_id %>_Group');
        if (newGroupRow_<%= new_group_id %>) {
          newGroupRow_<%= new_group_id %>.classList.add('cell-updated');
          setTimeout(() => {
            newGroupRow_<%= new_group_id %>.classList.remove('cell-updated');
          }, 2000);
          console.log("‚ú® Highlighted newly created group row");
        }
      }, 500);
    } else {
      console.log("‚ùå Could not trigger Group table refresh");
    }
  }, 200);

  // Update external filter selects with the new group option
  <% table_name = "Group" %>
  <% eval("#{table_name}.set_controller(search_ctl_group)") %>
  
  // Get the properly formatted group name for select options
  const newOptionStr_<%= new_group_id %> = "<%= j group_name %>";
  console.log("üéØ Adding new group option to selects:", newOptionStr_<%= new_group_id %>);
  
  // Update existing select options and add new ones with RTL styling
  const selectElements_<%= new_group_id %> = document.getElementsByClassName("Group_select");
  
  for (let i = 0; i < selectElements_<%= new_group_id %>.length; i++) {
    const selectElt_<%= new_group_id %> = selectElements_<%= new_group_id %>[i];
    
    // Check if option already exists
    let optionFound_<%= new_group_id %> = false;
    for (let j = 0; j < selectElt_<%= new_group_id %>.options.length; j++) {
      const option_<%= new_group_id %> = selectElt_<%= new_group_id %>.options[j];
      if (option_<%= new_group_id %>.value == <%= new_group_id %>) {
        option_<%= new_group_id %>.text = newOptionStr_<%= new_group_id %>;
        option_<%= new_group_id %>.style.direction = "rtl";
        optionFound_<%= new_group_id %> = true;
        break;
      }
    }
    
    // If option doesn't exist, add it with RTL styling
    if (!optionFound_<%= new_group_id %> && newOptionStr_<%= new_group_id %>.length > 0) {
      const newOption_<%= new_group_id %> = document.createElement("option");
      newOption_<%= new_group_id %>.value = <%= new_group_id %>;
      newOption_<%= new_group_id %>.text = newOptionStr_<%= new_group_id %>;
      newOption_<%= new_group_id %>.style.direction = "rtl";
      
      // Insert in alphabetical order
      let inserted_<%= new_group_id %> = false;
      for (let j = 0; j < selectElt_<%= new_group_id %>.options.length; j++) {
        const option_<%= new_group_id %> = selectElt_<%= new_group_id %>.options[j];
        if (option_<%= new_group_id %>.text.trim().toLowerCase() > newOptionStr_<%= new_group_id %>.trim().toLowerCase()) {
          selectElt_<%= new_group_id %>.insertBefore(newOption_<%= new_group_id %>, option_<%= new_group_id %>);
          inserted_<%= new_group_id %> = true;
          break;
        }
      }
      if (!inserted_<%= new_group_id %>) {
        selectElt_<%= new_group_id %>.appendChild(newOption_<%= new_group_id %>);
      }
      console.log("‚úÖ Added new group option to select element");
    }
  }

  recolour("Group");
  action_select_no_js();

  // Update external filter selects for tables that reference Group
  <% if ["Person", "Course", "Lecture", "Attendee", "Tutorial", "TutorialSchedule", "Institution", "User", "Term", "Day", "Location", "WillingLecturer", "WillingTutor", "EmailTemplate", "AgathaEmail"].include?(table_name) %>
    console.log("üîß Updating external filters for <%= table_name %> group creation");
    
    // Update Group<%= table_name %>-related external filters since new group members were added
    const group<%= table_name %>Selects = document.querySelectorAll('.Group<%= table_name %>_select');
    group<%= table_name %>Selects.forEach(select => {
      // Force refresh of Group<%= table_name %> selects since new group members were added
      if (select.onchange) {
        select.onchange();
      }
    });
  <% end %>

  alert("Successfully created <%= class_name %> group with name <%= group_name %>");
<% else %>
  alert("Group creation failed: <%= class_name %> group with name <%= group_name %> already exists.");
<% end %>

unwait();
